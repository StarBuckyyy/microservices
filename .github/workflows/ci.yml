name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy Services
    runs-on: self-hosted
    outputs:
      deployment_status: ${{ job.status }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Start Services
        run: |
          docker-compose -f docker-compose-microservices.yml down -v --remove-orphans || true
          docker-compose -f docker-compose-microservices.yml up --build -d

      - name: Wait for Services to be Healthy
        run: |
          echo "Waiting for all services to become healthy..."
          # Attend que l'API Gateway soit UP, ce qui signifie que les autres le sont aussi (à cause de depends_on)
          # Le healthcheck robuste est dans le docker-compose.yml, mais on fait une vérification finale ici.
          for i in $(seq 1 12); do
            if curl -sf http://localhost:8080/actuator/health; then
              echo "API Gateway is healthy!"
              exit 0
            fi
            echo "API Gateway not ready yet. Retrying in 10 seconds..."
            sleep 10
          done
          echo "Timeout: API Gateway failed to start."
          exit 1
          
  run-e2e-tests:
    name: Run End-to-End Tests
    runs-on: self-hosted
    needs: deploy
    if: ${{ needs.deploy.outputs.deployment_status == 'success' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run E2E Tests with Maven
        run: |
          # Se déplace dans le module de test et lance les tests
          mvn -f e2e-tests/pom.xml test -Dapi.base.url=http://localhost:8080

  cleanup:
    name: Cleanup Environment
    runs-on: self-hosted
    needs: [deploy, run-e2e-tests]
    if: always()

    steps:
      - name: Show Logs on Failure or Success
        run: |
          echo "Fetching final logs from all services..."
          docker-compose -f docker-compose-microservices.yml logs --tail=200

      - name: Stop Services
        run: |
          echo "Stopping all services and removing volumes..."
          docker-compose -f docker-compose-microservices.yml down -v --remove-orphans